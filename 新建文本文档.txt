#include<iostream>
#include<opencv2\opencv.hpp>
#include <opencv2\imgproc\types_c.h>
using namespace std;
using namespace cv;
int value = 0;
Mat gray, dst;
int thresh = 100;
Mat  close_result, open_result;
int max_thresh = 255;
RNG rng(12345);
int mini = 0;
Mat im;
int main()
{
	void thresh_callback(int, void*);
	//读取图片
	im = imread("E:\\C++\\0000.jpg");
	imshow("原图", im);
	//转化为灰度图
	cvtColor(im, gray, COLOR_BGR2GRAY);

	//进行二值化处理	
	threshold(gray, dst, 100, 255, 3);

	//进行开闭运算处理
	Mat element = getStructuringElement(MORPH_RECT, Size(5, 5));
	morphologyEx(dst, close_result, MORPH_CLOSE, element);
	morphologyEx(close_result, open_result, MORPH_OPEN, element);
	imshow(" 处理后", open_result);

	//调用函数
	thresh_callback(0, 0);

	waitKey(0);
	return 0;

}

void thresh_callback(int, void*)
{
	Mat threshold_output;
	vector<vector<Point> > contours;
	vector<Vec4i> hierarchy;

	/// 使用Threshold检测边缘
	threshold(open_result, threshold_output, thresh, 255, THRESH_BINARY);
	/// 找到最外围轮廓
	findContours(threshold_output, contours, hierarchy, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE, Point(0, 0));

	///  获取矩形
	vector<vector<Point> > contours_poly(contours.size());
	vector<Rect> boundRect(contours.size());
	vector<Point2f>center(contours.size());

	for (int i = 0; i < contours.size(); i++)
	{
		approxPolyDP(Mat(contours[i]), contours_poly[i], 3, true);
		boundRect[i] = boundingRect(Mat(contours_poly[i]));
	}


	//找到最大矩形并画出来
	Mat drawing = Mat::zeros(threshold_output.size(), CV_8UC3);
	double max = (boundRect[0].br().x - boundRect[0].tl().x) * (boundRect[0].br().y - boundRect[0].tl().y);
	for (int i = 1; i < contours.size(); i++)
	{
		double t = (boundRect[i].br().x - boundRect[i].tl().x) * (boundRect[i].br().y - boundRect[i].tl().y);
		if (t < max) {
			max = t;
			mini = i;
		}
		else continue;
	}
	rectangle(drawing, boundRect[mini].tl(), boundRect[mini].br(), Scalar(0, 0, 255), 2, 8, 0);
	namedWindow("Contours");
	imshow("Contours", drawing);
	cout << (boundRect[mini].tl() + boundRect[mini].br()) / 2 << endl;


	//把框取的内容抠出来并显示
	Rect rect(boundRect[mini].tl(), boundRect[mini].br());
	Mat roi = Mat(im, rect);
	imshow("特征", roi);
}



